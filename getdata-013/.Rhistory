source('~/R/src/temp4.R', echo=TRUE)
f1c(x, y)
x = 1:10000
y = 2:20000
system.time(f1a(x, y))
system.time(f1b(x, y))
system.time(f1b_2(x, y))
system.time(f1c(x, y))
f1a(x, y)
source('~/R/src/temp4.R', echo=TRUE)
source('~/R/src/temp4.R', echo=TRUE)
f1_check
f1_check()
source('~/R/src/temp4.R', echo=TRUE)
f1_check()
source('~/R/src/temp4.R', echo=TRUE)
f1_check()
rm(list=ls())
m = matrix(1:9, 3, 3)
m
m[2,2]
m[2,2] = NA
m[c(2, 2)] = NA
m
m[c(2, 3)] = NA
m
m[2, 3] = NA
m
m[c(1, 2)]
m[ , !apply(is.na(m), 2, any), drop = F]
m[2, 3] = 1
m
m[ , !apply(is.na(m), 2, any), drop = F]
m[ , !apply(is.na(m), 2, any)]
m[ ,!apply(is.na(m), 2, any)]
n = matrix(1:9, 3, 3)
n[ ,!apply(is.na(n), 2, any)]
n[ ,!apply(is.na(n), 2, any), drop = F]
is.na(m)
source('~/R/src/temp4.R', echo=TRUE)
d2b(n)
f2b(n)
f2b(m)
m
rank(c(5, 3, 7, 2, 1, 0, 2, 1, 3))
rank(c(5, 3, 7, 2, 1, 0, 2, 1, 3), ties.method = )
?rank
rank(c(5, 3, 7, 2, 1, 0, 2, 1, 3), ties.method = "first")
source('~/R/src/temp4.R', echo=TRUE)
empCopula(0.5, 0.6, c(4, 5, 2, 1), 4:1)
a = 1:10
sapply(1:10, function(i) a[i] <= 5)
b = 2:11
(a <= 5) & (b <= 5)
(a <= 5) | (b <= 5)
(a <= c) & (b <= c)
c = c(5, 6, 7)
(a <= c) & (b <= c)
empCopula(rep(0.5, 2), rep(0.6, 2), c(4, 5, 2, 1), 4:1)
source('~/R/src/temp4.R', echo=TRUE)
empCopula2(rep(0.5, 2), rep(0.6, 2), c(4, 5, 2, 1), 4:1)
source('~/R/src/temp4.R', echo=TRUE)
empCopula2(rep(0.5, 2), rep(0.6, 2), c(4, 5, 2, 1), 4:1)
empCopula2(c(0.5, 0.2), c(0.6, 0.8), c(4, 5, 2, 1), 4:1)
source('~/.active-rstudio-document', echo=TRUE)
f4a(3)
source('~/R/src/temp4.R', echo=TRUE)
?col
source('~/R/src/temp4.R', echo=TRUE)
source('~/R/src/temp4.R', echo=TRUE)
f4_check
f4_check()
source('~/R/src/temp4.R', echo=TRUE)
f4_check()
funB <- function (n)
{
mat <- matrix(0, ncol=n, nrow=n)
sum( (col(mat)^2)/(10+4*row(mat)^3)*(col(mat)<=row(mat))
)
}
funB(2)
source('~/R/src/temp4.R', echo=TRUE)
f4_check()
source('~/R/src/temp4.R', echo=TRUE)
f4_check()
?outer
source('~/R/src/temp4.R', echo=TRUE)
f4_check()
source('~/R/src/temp4.R', echo=TRUE)
f4_check()
?sum
source('~/R/src/temp4.R', echo=TRUE)
f4_check()
source('~/R/src/temp4.R', echo=TRUE)
f4_check()
source('~/R/src/temp4.R', echo=TRUE)
f4_check()
source('~/R/src/temp4.R', echo=TRUE)
f4_check()
source('~/R/src/temp4.R', echo=TRUE)
f4_time(10)
f4_time(100)
f4_time(1000)
source('~/R/src/temp4.R', echo=TRUE)
f4_time(1000)
source('~/R/src/temp4.R', echo=TRUE)
f4_check()
f4_time(1000)
rm(list=ls())
?rexp
rexp(10, 2)
source('~/R/src/temp4.R', echo=TRUE)
f5a(20, 2, 2)
source('~/R/src/temp4.R', echo=TRUE)
f5a(20, 2, 2)
?replicate
source('~/R/src/temp4.R', echo=TRUE)
f5b(20, 2, 2)
source('~/R/src/temp4.R', echo=TRUE)
f5c(10, 20, 2, 2)
?pmax
source('~/R/src/temp4.R', echo=TRUE)
f5c(10, 20, 2, 2)
source('~/R/src/temp4.R', echo=TRUE)
f5c(10, 20, 2, 2)
?cumprod
cumsum
cumsum(1:3)
source('~/R/src/temp4.R', echo=TRUE)
rwalk_a(10)
source('~/R/src/temp4.R', echo=TRUE)
rwalk_a(10)
source('~/R/src/temp4.R', echo=TRUE)
rwalk_a(10)
source('~/R/src/temp4.R', echo=TRUE)
rwalk_b(10)
source('~/R/src/temp4.R', echo=TRUE)
rwalk_b(10)
source('~/R/src/temp4.R', echo=TRUE)
rwalk_c1(10, 10)
rwalk_c2(10, 10)
rwalk_c2(1000, 10)
rwalk_c1(1000, 10)
system.time(rwalk_c1(1000, 10))
system.time(rwalk_c2(1000, 10))
system.time(rwalk_c1(1000, 100))
system.time(rwalk_c2(1000, 100))
system.time(rwalk_c1(5000, 100))
system.time(rwalk_c2(5000, 100))
rm(list=ls())
x1 = 1:5
x2 = 2:6
(x1 - x2)^2 %>% sum()
install.packages("magrittr")
(x1 - x2)^2 %>% sum()
library(magrittr)
(x1 - x2)^2 %>% sum()
source('~/R/src/temp5.R', echo=TRUE)
f1a(1:10)
source('~/R/src/temp5.R', echo=TRUE)
source('~/R/src/temp5.R', echo=TRUE)
f1a(1:10)
f1a(1:10)
source('~/R/src/temp5.R', echo=TRUE)
f1a(1:10)
source('~/R/src/temp5.R', echo=TRUE)
f1a(1:10)
source('~/R/src/temp5.R', echo=TRUE)
ts = ts(1:10000)
head(f1a(ts))
head(f1b(ts))
source('~/R/src/temp5.R', echo=TRUE)
head(f1b(ts))
system.time(f1a(ts))
system.time(f1b(ts))
system.time(f1a(ts))
system.time(f1b(ts))
sum(2:4 > 3)
sum(2:4 > 2)
sum(2:4 > 1:3)
sum(2:4 > c(2, 4, 4))
2:4 > c(2, 4, 4)
2:4 > c(2, 4, 3)
sum(2:4 > c(2, 4, 3))
source('~/R/src/temp5.R', echo=TRUE)
f2a(4)
lapply(rep(10, 4), f2a)
sapply(rep(10, 4), f2a)
lapply(rep(10, 4), f2a)
sapply(rep(10, 4), f2a)
sapply(rep(10, 4), f2a)
myList = lapply(rep(10, 1000), f2a)
lapply(rep(1, 2), f2a)
myList = lapply(rep(10, 7), f2a)
myList[1,]
myList[1]
myList[[1]][1]
myList[[1]]
myList[[1]][1]
myList[[1]][2]
myList
rep(1, 2)
source('~/R/src/temp5.R', echo=TRUE)
source('~/R/src/temp5.R', echo=TRUE)
allX
dim(allX)
dim(allY)
source('~/.active-rstudio-document', echo=TRUE)
source('~/R/src/temp5.R', echo=TRUE)
myListCopy
?filter
filter(myList, count > 2)
subset(myList, count > 2)
subset(myList, myList$count > 2)
subset(myList, myList$count > 1)
source('~/R/src/temp5.R', echo=TRUE)
moreThan2
source('~/R/src/temp5.R', echo=TRUE)
moreThan2
source('~/.active-rstudio-document', echo=TRUE)
head(myList)
?t
sapply(myList, function(x) x$xVec - x$yVec)
rm(list=ls()
rm(list=ls())
rm(list=ls())
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
trellis.par.set()
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(rJava)
library(xlsx)
getwd()
setwd("R/src/getdata-013")
dir()
dat = read.xlsx("1.xlsx", rowIndex = 18:23, colIndex = 7:15)
dat = read.xlsx("1.xlsx", rowIndex = 18:23, colIndex = 7:15, sheetIndex = 1)
sum(dat$Zip*dat$Ext,na.rm=T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile = "1.xml", method="curl")
library(XML)
doc = xmlTreeParse("1.xml", useInternalNodes = TRUE)
doc
root = xmlRoot(doc)
names(root)
root[[1]]
root[[1]][[1]]
install.packages(c("jpeg","jsonlite","data.table","httr"))
# //node[@attr="value"]
xmlValue
xpathSApply(root, "//name", xmlValue)
root[[1]][[1]]
xpathSApply(root, "//zipcode", xmlValue)
# //node[@attr="value"]
xpathSApply(root, "//zipcode", xmlValue)
zipcodes = xpathSApply(root, "//zipcode", xmlValue)
zipcodes == 21231
sum(zipcodes == 21231)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "2.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "2.csv", method="curl")
?fread
??fread
install("data.table")
installed.packages(data.table)
installed.packages("data.table")
?fread
data.table
install.packages("data.table")
library(data.table)
?fread
DT = fread("2.csv")
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
DT[,mean(pwgtp15),by=SEX]
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
csv = read.csv("1.csv")
csv$VAL == 24
val = csv$VAL[complete.cases(csv$VAL)]
val
sum(val == 24)
source('~/p/stats/r-stuff/getdata-013/quiz1.R', echo=TRUE)
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
rm(list=ls())
getwd()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(csv)
csv = read.csv("3.csv")
names(csv)
sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages("sqldf")
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
source('~/.active-rstudio-document', echo=TRUE)
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
download.file("http://biostat.jhsph.edu/~jleek/contact.html", destfile="1.html")
connection = url("http://biostat.jhsph.edu/~jleek/contact.html", destfile="1.html")
connection = url("http://biostat.jhsph.edu/~jleek/contact.html")
html = readLines(connection)
html
html[10]
html[20]
html[c(10, 20)]
html[c(10, 20, 30, 100)]
length(html[c(10, 20, 30, 100)])
sapply(html[c(10, 20, 30, 100)], length)
html[c(10, 20, 30, 100)]
lines = html[c(10, 20, 30, 100)]
apply(lines, length)
apply(lines, FUN=length)
apply(lines, 1, FUN=length)
sapply(lines, FUN=length)
length(lines[1])
lines[1]
nchar(lines[1])
nchar(lines)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", destfile = "1.for", method="curl")
t = read.table("1.for", skip = 2)
t = read.table("1.for", skip = 3)
t = read.table("1.for", skip = 4)
t = read.fwf(file="1.for", skip=4, widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(t)
t[,4]
mean(t[,4])
sum(t[,4])
nchar(lines)
sum(t[,4])
rm(list=ls())
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "q3-1.csv", method="curl")
csv = read.csv("q3-1.csv")
head(csv)
library(dplyr)
filter(csv, ACR == 3)
filter(csv, ACR == 3, AGS == 6)
agricultureLogical = csv %>% filter(ACR == 3, AGS == 6)
which(csv$ACR == 3 & csv$AGS == 6)
install.packages("jpeg")
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile="jeff.jpg", method="curl")
img = readJPEG("jeff.jpg")
img
img = readJPEG("jeff.jpg", native=TRUE)
img = readJPEG("jeff.jpg", native=TRUE)
img
class(img)
img[1,]
img[2,]
as.vector(img)
length(as.vector(img))
v = as.vector(img)
quantile(v)
quantile(v, probs = c(30, 80))
quantile(v, probs = c(0.3, 0.8))
source('~/.active-rstudio-document', echo=TRUE)
head(gdp)
head(stats)
?read.csv
gdp = read.csv("q3-2.csv", skip=5)
head(dgp)
head(gdp)
gdp = read.csv("q3-2.csv", skip=4)
stats = read.csv("q3-3.csv")
names(gdp)[1] = "code"
head(gdp)
names(gdp)[1] = "CountryCode"
head(gdp)
merge(gdp, stats, "CountryCode")
head(merge(gdp, stats, "CountryCode"))
unique(gdp$CountryCode)
intersect(gdp$CountryCode, stats$CountryCode)
length(intersect(gdp$CountryCode, stats$CountryCode))
head(gdp)
arrange(gdp, desc(X.4))
gdp$size = as.numeric(gdp$X.4)
gdp$size
gdp$X.4
gdp$X.4[1]
gdp$size = as.numeric(as.character(gdp$X.4))
gdp$size
as.character(gdp$X.4)
gdp = read.csv("q3-2.csv", skip=4, stringsAsFactors=FALSE)
head(gdp)
gdp$X.4
gdp = read.csv("q3-2.csv", skip=4, stringsAsFactors=FALSE, strip.white=TRUE)
gdp$X.4
install.packages("stringr", dependencies=TRUE)
library(stringr)
str_trim(c("  100 ", "  12 "))
gdp$size = as.numeric(str_trim(gdp$X.4))
gdp$si
gdp$size
gdp$X.4
str_trim(gdp$X.4)
gdp$size = as.numeric(gsub(",","", str_trim(gdp$X.4)))
gdp$size
arrange(gdp, desc(size))
head(arrange(gdp, size))
arrange(gdp, size)
length(intersect(gdp$CountryCode, stats$CountryCode))
names(gdp)[1] = "CountryCode"
length(intersect(gdp$CountryCode, stats$CountryCode))
gdp$size = as.numeric(gsub(",","", str_trim(gdp$X.4)))
arrange(gdp, size)
arrange(gdp, size)[13,]
gdp$CountryCode
unique(gdp$CountryCode)
unique(stats$CountryCode)
length(unique(gdp$CountryCode))
length(unique(stats$CountryCode))
intersect(unique(stats$CountryCode), unique(gdp$CountryCode))
length(intersect(unique(stats$CountryCode), unique(gdp$CountryCode)))
stats = read.csv("q3-3.csv", stringsAsFactors=FALSE)
length(unique(stats$CountryCode))
length(intersect(unique(stats$CountryCode), unique(gdp$CountryCode)))
intersect(unique(stats$CountryCode), unique(gdp$CountryCode))
intersect(stats$CountryCode, gdp$CountryCode)
length(intersect(unique(stats$CountryCode), unique(gdp$CountryCode)))
gdp
head(stats)
merge(stats, gdp, "CountryCode")
merged = merge(stats, gdp, "CountryCode")
head(merged)
filter(merged, Income.Group == "High income: nonOECD")
merged = merge(stats, gdp, "CountryCode")
merged = mutate(gdp_rank = rank(size))
head(select(merged, CountryCode, size, gdp_rank))
gdp$size
merged$size
merged = mutate(gdp_rank = rank(size))
merged = mutate(merged, gdp_rank = rank(size))
head(select(merged, CountryCode, size, gdp_rank))
merged = arrange(merged, gdp_rank)
head(select(merged, CountryCode, size, gdp_rank))
head(select(merged, CountryCode, size, gdp_rank), n=30)
?rank
merged = mutate(merged, gdp_rank = rank(size, ties.method = "first"))
merged = merge(stats, gdp, "CountryCode")
merged = mutate(merged, gdp_rank = rank(size, ties.method = "first"))
merged = arrange(merged, gdp_rank)
head(select(merged, CountryCode, size, gdp_rank), n=30)
head(select(merged, CountryCode, size, gdp_rank, Income.Group), n=30)
filter(merged, Income.Group == "High income: nonOECD")$rank
filter(merged, Income.Group == "High income: nonOECD")$gdp_rank
avg(filter(merged, Income.Group == "High income: nonOECD")$gdp_rank)
ave(filter(merged, Income.Group == "High income: nonOECD")$gdp_rank)
mean(filter(merged, Income.Group == "High income: nonOECD")$gdp_rank)
merged = mutate(merged, gdp_rank = rank(-size, ties.method = "first"))
merged = arrange(merged, gdp_rank)
head(select(merged, CountryCode, size, gdp_rank, Income.Group), n=30)
mean(filter(merged, Income.Group == "High income: nonOECD")$gdp_rank)
filter(merged, Income.Group == "High income: nonOECD")$gdp_rank
filter(merged, Income.Group == "High income: OECD")$gdp_rank
mean(filter(merged, Income.Group == "High income: OECD")$gdp_rank)
mean(filter(merged, Income.Group == "High income: OECD")$gdp_rank)
mean(filter(merged, Income.Group == "High income: nonOECD")$gdp_rank)
select(merged, CountryCode, size, gdp_rank, Income.Group)
gdp
gdp = read.csv("q3-2.csv", skip=4, stringsAsFactors=FALSE, nrow=215)
gdp
source('~/.active-rstudio-document', echo=TRUE)
head(select(merged, CountryCode, size, gdp_rank, Income.Group), n=50)
mean(filter(merged, Income.Group == "High income: OECD")$gdp_rank)
mean(filter(merged, Income.Group == "High income: nonOECD")$gdp_rank)
filter(merged, Income.Group == "High income: nonOECD")$gdp_rank
filter(merged, Income.Group == "High income: nonOECD") %>% select(CountryCode, size, gdp_rank, Income.Group)
length(intersect(gdp$CountryCode, stats$CountryCode))
gdp = gdp %>% mutate(size = as.numeric(gsub(",","", str_trim(gdp$X.4)))) %>%
filter(!is.na(size))
arrange(gdp, size)[13,]
gdp$size
source('~/.active-rstudio-document', echo=TRUE)
cut(merged$gdp_rank)
cut(merged$gdp_rank, breaks=quantile(merged$gdp_rank))
quantile(merged$gdp_rank)
merged %>% filter(gdp_rank <= 48)
merged %>% filter(gdp_rank <= 48) %>% select(CountryCode, size, gdp_rank, Income.Group)
quantile(merged$size)
merged %>% filter(size <= 6972) %>% select(CountryCode, size, gdp_rank, Income.Group)
merged %>% filter(size <= 6972, Income.Group == "Lower middle income") %>% select(CountryCode, size, gdp_rank, Income.Group)
quantile(merged$size)
merged %>% filter(gdp_rank <= 38, Income.Group == "Lower middle income") %>% select(CountryCode, size, gdp_rank, Income.Group)
rm(list=ls())
