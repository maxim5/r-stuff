x
y
x / y
rm(good, bad, m)
install.packages("swirl")
library("swirl")
install.packages("swirl")
install.packages("testthat")
install.packages("swirl")
library("swirl")
swirl()
ч = 4
x = 4
class(x)
x = c(4, "a", T)
class(x)
x
x = c(4, 2)
class(x)
x = c(1, 2, 3)
y = c(1, 2, 3)
cbind(x, y)
x = list(2, "a")
x[[2]]
class(x[[2]])
1:4 + 2:3
(1:4) + (2:3)
x = 1:10
x[x < 6] = 0
x
readtable
data.readtable
read.table
read.table("hw1_data.csv")
read.table("/home/maxim/downloads/r/hw1_data.csv")
read.csv("/home/maxim/downloads/r/hw1_data.csv")
read.csv("/home/maxim/downloads/r/hw1_data.csv", nrows=2)
num = countLines
name = "/home/maxim/downloads/r/hw1_data.csv"
install.packages("util")
library("util")
library("utils")
num = countLines
num = countLines()
num = R.countLines()
num = utils.countLines()
readLines
length(readLines(name))
num = length(readLines(name)) - 1
read.csv(name, header=FALSE, skip=num - 2)
read.csv(name, skip=num - 2)
read.csv(name, nrows=2)
help(read.csv)
read.csv(name, header=T, skip=num - 2)
read.csv(name, header=T, skip=num - 2, nrows=2)
read.csv(name, header=TRUE, skip=num - 2, nrows=2)
read.csv(name)
read.csv(name)[1,]
read.csv(name)[1,num]
x = 1:num
good = x == 1
good = x == 1 or
good = x == 1 ||
num - x < 2
good
good = num < x + 2
good
good = (num < x + 2) or (x == 1)
good = (num < x + 2) || (x == 1)
good
good = (num < x + 2)
read.csv(name)[good]
t = read.csv(name)
head(t)
tail(r)
tail(t)
tail(t, n=2)
t[47]
t
t[47]
t[1]
t[1][47]
t[c(1, 47)]
matrix(t)
t
matrix(t)[1]
matrix(t)[1][47]
t
head(t)
t[1,]
t[47,]
t[1]
t[1,]
t[47,]
t[,1]
head(t)
ozone = t[,1]
ozone[!is.na(ozone)]
length(ozone[!is.na(ozone)])
length(ozone[is.na(ozone)])
normal = ozone[!is.na(ozone)]
normal
mean(normal)
head(t)
t[t$Ozone > 30]
t[t$Ozone > 30,]
t[t$Ozone > 31,]
t[!is.na(t$Ozone) && t$Ozone > 31,]
t[!is.na(t$Ozone) && t$Ozone[1] > 31,]
head(t)
subset(t, Ozone > 31)
subset(t, Ozone > 31 & Temp > 90)
mean(subset(t, Ozone > 31 & Temp > 90))
filtered = subset(t, Ozone > 31 & Temp > 90)
filtered
filtered$Solar.R
mean(filtered$Solar.R)
filtered = subset(t, Month = 6)
filtered
filtered = subset(t, Month == 6)
length(filtered)
filtered
filtered$Temp
mean(filtered$Temp)
filtered = subset(t, Month == 5)
filtered
filtered$Ozone
max(filtered$Ozone)
complete.cases(filtered$Ozone)
ozone = filtered$Ozone
ozone[complete.cases(ozone)]
max(ozone[complete.cases(ozone)])
if (TRUE) { print(1); } else { print(2); }
rm(good)
rm(name)
rm(name, normal, num, ozone, x, y)
rm(t, filtered)
rm(ч)
x = 3
y = if (x > 2) 10 else 20
y
for (i in 1:10) {}
for (i in 1:10) {
print(i);
}
i
rm(i)
rm(x)
rm(y)
rm()
x = c("a", "b", "c", "d")
for (it in x) {}
print(it);
for (it in x) {
print(it);
}
rm()
rm(ls())
rm(ls(all=TRUE))
rm(list=ls(all=TRUE))
rm(list=ls())
ls()
seq_len(10)
x = 10
1:x
print("Hello, World");
print("Hello, World");
print("Hello, World");
print(1);
print("Hello, World");
print(1);
print(1);
source('~/.active-rstudio-document')
}
}
while (z >= 3 && z <= 10) {
print(z)
coin = rbinom(1, 1, 0.5)
if (coin == 1) {
z++
} else {
z--
}
}
print("Hello, World");
source("hello.R")
source('~/R/src/hello.R', echo=TRUE)
source('~/R/src/hello.R', echo=TRUE)
print("Hello, World");
# random walk
z = 5
while (z >= 3 && z <= 10) {
print(z)
coin = rbinom(1, 1, 0.5)
if (coin == 1) {
z = z + 1
} else {
z = z - 1
}
}
ls()
rm(list=ls())
rm(ls())
add = function(x, y) {
return x+y;
}
add = function(x, y) {
return x+y;
}
add = function(x, y) {
return x+y;
}
add = function(x, y) {
x+y;
}
add(1, 2)
add = function(x, y) {
return x+y
}
x+y
add = function(x, y) {
x+y
}
above10 = function(x) {
x[x > 10]
}
above(1:20)
above10(1:20)
above = function(x, n) {
x[x > n]
}
above(1:20, 5)
above(1:20)
above = function(x, n=10) {
x[x > n]
}
above(1:20)
columnmean = function(m) {
columns = ncol(m)
means = numeric(columns);
for (i in 1:columns) {
means[i] = mean(m[, i])
}
means
}
m = matrix(1:6, 2, 3)
m
columnmean(m)
columnmean = function(m, removeNA = TRUE) {
columns = ncol(m)
means = numeric(columns);
for (i in 1:columns) {
means[i] = mean(m[, i], na,rm = removeNA)
}
means
}
columnmean(airquality)
columnmean = function(m, removeNA = TRUE) {
columns = ncol(m)
means = numeric(columns);
for (i in 1:columns) {
means[i] = mean(m[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
rm(list=ls())
library(swirl)
swirl()
5 + 7
x = 5 + 7
x <- 5 + 7
x
y = x - 3
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mysql = sqrt(z - 1)
mysql <- sqrt(z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
flips = sample(0:1, 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(0:1, 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips <- rbinom(100, size = 1, prob = 0.7)
flips <- rbinom(n = 100, size = 1, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
?ave
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
getwd()
setwd("R/src/assignment-3")
getwd()
head(rankall("heart attack", 20), 10)
?apply
?rank
rm(list=ls())
csv = read.csv("outcome-of-care-measures.csv", stringsAsFactors=F)
csv[, var] = suppressWarnings(as.numeric(csv[, var]))     # convert variable to a numeric, ignoring "Not Available")
var = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
csv[, var] = suppressWarnings(as.numeric(csv[, var]))     # convert variable to a numeric, ignoring "Not Available")
valid = subset(csv, !is.na(csv[[var]]))                   # filter only valid variable value
str(csv)
?apply
apply(valid, valid[[var]], rank)
apply(valid, var, rank)
head(valid)
valid[,names(DF) %in% c(var, "State", "Hospital.Name")]
valid[,names(valid) %in% c(var, "State", "Hospital.Name")]
done = valid[,names(valid) %in% c(var, "State", "Hospital.Name")]
head(done)
apply(done, var, rank)
apply(done, 3, rank)
ave(valid[[var]], valid$State, FUN=rank)
ave(valid[[var]], valid$State, FUN=rank, , ties.method='min')
ave(valid[[var]], valid$State, FUN=rank, ties.method='min')
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
prepared
done
#tapply(done, )
?tapply
tapply(done[[var]], "State", FUN=rank)
done[[var]]
tapply(done[[var]], "State", FUN=rank)
recover()
tapply(done[[var]], done$State, FUN=rank)
tapply(c(done[[var]], "Hospital.Name"), done$State, FUN=rank)
head(done)
summary(tapply(done[[var]], done$State, FUN=rank))
?ave
head(done[[var]])
ave(count, year, FUN = function(x) rank(-x, ties.method = "first"))
ave(valid[[var]], valid$State, FUN = function(x) rank(x, ties.method="first"))
transform(valid, Rank = ave(valid[[var]], valid$State, FUN = function(x) rank(x, ties.method="first"))
)
valid$Rank = ave(valid[[var]], valid$State, FUN = function(x) rank(x, ties.method="first")))
valid$Rank = ave(valid[[var]], valid$State, FUN = function(x) rank(x, ties.method="first"))
valid[valid$Rank == 10, c("State", "Hospital.Name", var)]
valid[valid$Rank == 20, c("State", "Hospital.Name", var)]
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
states = sort(unique(csv$State))
for (i in states) print(i)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
subset(csv, State == "WI" & Hospital.Name == "MAYO CLINIC HEALTH SYSTEM - NORTHLAND, INC")
subset(csv, State == "WI" & Hospital.Name == "MAYO CLINIC HEALTH SYSTEM - NORTHLAND, INC")[, "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"]
tail(rankall("pneumonia", "worst"), 3)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
source('~/.active-rstudio-document', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
source('~/R/src/assignment-3/rankall.R', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
system.time()
system.time(rankall("heart failure", 10))
RProf
RProf()
Rprof()
s
ls
lm(y ~ x)
y 2
y = 2
x = 3
lm(y ~ x)
summaryProf()
summaryRprof()
End()
\dots
Rprof(NULL)
summaryRprof()
Rprof()
lm(y ~ x)
Rprof(NULL)
summaryRprof()
x = rnorm(10000)
y = rnorm(10000)
lm(y ~ x)
Rprof()
lm(y ~ x)
Rprof(NULL)
summaryRprof()
set.seed(1)
rpois(5, 2)
x <- rep(0:1, each = 5)
x
x1 = rnorm(100000)
x2 = rnorm(100000)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y = rnorm(100000)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
rm(list=ls())
